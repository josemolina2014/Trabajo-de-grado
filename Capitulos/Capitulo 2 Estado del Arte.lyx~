#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass ociamthesis-lyx
\options a4paper,titlepage
\use_default_options false
\maintain_unincluded_children false
\language spanish-mexico
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing onehalf
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine natbib
\cite_engine_type numerical
\biblio_style plainnat
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style french
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Revisión de literatura 
\end_layout

\begin_layout Section
Marco teórico 
\end_layout

\begin_layout Standard
El Desarrollo de software se compone de un grupo de procesos, actividades
 y tareas que se relacionan entre sí para elaborar un producto de software,
 a este grupo de métodos se les conoce como ciclo de vida del desarrollo
 de software en inglés por sus siglas Software Development Life Cycle (SDLC).
 Dentro del mercado existe una gran variedad de modelos, entre los más destacado
s de la industria están Cascada, Espiral y Ágil.
 
\end_layout

\begin_layout Subsection
Ciclo de vida del desarrollo de software 
\end_layout

\begin_layout Standard
El Desarrollo de software es una serie de actividades relacionadas que conlleva
 a la elaboración de un producto de software, comúnmente denominados ciclo
 de vida del desarrollo de software (SDLC) (Sommerville 2011 
\begin_inset CommandInset citation
LatexCommand cite
key "IanSommerville2011"
literal "false"

\end_inset

).
 
\end_layout

\begin_layout Standard
El proceso de desarrollo involucra con conjunto de diversas tareas, que
 van desde lo administrativo, pasando por lo técnico, hasta la gestión y
 gerencia del proyecto.
 Recientemente el proceso de desarrollo de software se consolido en la norma
 ISO ISO/IEC 12207 define las etapas básicas del proceso de desarrollo de
 software.
 
\end_layout

\begin_layout Itemize
Análisis: Se identifican los requisitos que debe cumplir el software y se
 construye un modelo de dichos requisitos.
 
\end_layout

\begin_layout Itemize
Diseño: A partir del modelo de análisis se identifican los procesos y las
 estructuras de datos en las que se descompone el sistema y además se construye
 un modelo del sistema a desarrollar.
 
\end_layout

\begin_layout Itemize
Codificación: Se construye el sistema en sí mismo 
\end_layout

\begin_layout Itemize
Pruebas: Se comprueba que el sistema construido es correcto y cumple con
 el modelo de requisitos 
\end_layout

\begin_layout Itemize
Mantenimiento: Esta fase tiene lugar tras la entrega del producto acabado
 y en ella se trata de asegurar que el sistema siga funcionando y adaptándose
 a los nuevos requisitos.
 
\end_layout

\begin_layout Subsection
Modelos de proceso de software 
\end_layout

\begin_layout Subsubsection
El modelo en cascada (waterfall) 
\end_layout

\begin_layout Standard
El primer modelo publicado sobre el proceso de desarrollo de software se
 derivó a partir de procesos más generales de ingeniería de sistemas, este
 modelo de desarrollo se considera como la forma más tradicional de gestionar
 el desarrollo de software.
 (Sommerville 2011 
\begin_inset CommandInset citation
LatexCommand cite
key "IanSommerville2011"
literal "false"

\end_inset

)
\end_layout

\begin_layout Standard
La 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Modelo-en-cascada"
plural "false"
caps "false"
noprefix "false"

\end_inset

 presenta un modelo grafico de las diferentes etapas secuencias que componen
 el modelo donde se implementan las actividades fundamentales del proceso
 de especificación, desarrollo, validación y evolución y, luego, los representa
 como fases separadas del proceso, tal como especificación de requerimientos,
 diseño de software, implementación, pruebas, etcétera.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename D:/OneDrive - Pontificia Universidad Javeriana Cali/Trabajo de Grado/Avances/Formato lyx/imagenes/modelo cascada.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Modelo en cascada
\begin_inset CommandInset label
LatexCommand label
name "fig:Modelo-en-cascada"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Agile
\end_layout

\begin_layout Standard
En la década de 1990 el descontento con estos enfoques engorrosos de la
 ingeniería de software condujo a algunos desarrolladores de software a
 proponer nuevos “métodos ágiles” los cuales permitieron que el equipo de
 desarrollo se enfocara en el software en lugar del diseño y la documentación.
 (Sommerville 2011 [1]).
 
\end_layout

\begin_layout Standard
El término "Ágil" es relativamente nuevo, acuñado oficialmente en 2001 cuando
 un grupo de profesionales del software publicó un documento llamado Manifiesto
 Ágil.
 La forma más fácil de entender Agile es como el extremo opuesto al desarrollo
 de software secuencial tradicional.
 El proceso ágil valora la colaboración constante, las entregas frecuentes
 y la evolución continua de los requisitos.
 Hay una comunicación constante; los cambios se hacen en tiempo real; y
 las sorpresas son menos frecuentes.
 (Murray 2016 [2]) 
\end_layout

\begin_layout Standard
Manifiesto Agil (Manifiesto 2001[3]) 
\end_layout

\begin_layout Standard
Individuos e interacciones sobre procesos y herramientas 
\end_layout

\begin_layout Itemize
Software funcionando sobre documentación extensiva 
\end_layout

\begin_layout Itemize
Colaboración con el cliente sobre negociación contractual 
\end_layout

\begin_layout Itemize
Respuesta ante el cambio sobre seguir un plan 
\end_layout

\begin_layout Standard
Esto es, aunque valoramos los elementos de la derecha, valoramos más los
 de la izquierda.
 En Agile las tareas se dividen en bloques de tiempo, con el fin de entregar
 características específicas para un lanzamiento.
 Se adopta un enfoque iterativo y después de cada iteración se entrega una
 versión del software funcional.
 Cada versión es incremental en términos de características; la versión
 final contiene todas las características requeridas por el cliente (ver
 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Características-generales-marcos-agile"
plural "false"
caps "false"
noprefix "false"

\end_inset

 ).
 Los marcos de trabajo ágiles más populares en la industria son Rational
 Unified Process (1994), Scrum (1995), Crystal Clear, Extreme Programming
 (1996), Adaptive Software Development, Feature Driven Development y Dynamic
 Systems Development Method (DSDM) (1995).
 En la 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Valores-agile-en-marcos-populares"
plural "false"
caps "false"
noprefix "false"

\end_inset

 se muestran los valores agile en 3 marcos de trabajo más populares.
 En la actualidad se denominan colectivamente marcos de trabajo ágiles,
 tras la publicación del Manifiesto Ágil en 2001 (Murray 2016 [2]).
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename D:/OneDrive - Pontificia Universidad Javeriana Cali/Trabajo de Grado/Avances/Documento Lyx - Copy/imagenes/valores agile.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Valores agile en marcos de trabajo más populares del mercado
\begin_inset CommandInset label
LatexCommand label
name "fig:Valores-agile-en-marcos-populares"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\size tiny
Imagen tomada del libro Learning Agile
\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename D:/OneDrive - Pontificia Universidad Javeriana Cali/Trabajo de Grado/Avances/Documento Lyx - Copy/imagenes/caracteristicas generales.png
	scale 60

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Características generales de los marcos de trabajo Agile
\begin_inset CommandInset label
LatexCommand label
name "fig:Características-generales-marcos-agile"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\size tiny
Imagen tomada del libro Agile practice Guide, Project Management Institute
 2017
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
DevOps 
\end_layout

\begin_layout Standard
El termino DevOps, como cualquier nuevo concepto tecnológico que se adopta
 en la industria, se ha convertido en una palabra de moda sobrecargada en
 donde todo el mundo habla de tema y no todo el mundo sabe realmente de
 qué se trata, lo peor de todo es que muchos de los que afirman que lo hacen
 lo hacen realmente mal.
\end_layout

\begin_layout Subsubsection
Conceptos y definiciones: 
\end_layout

\begin_layout Standard
DevOps es un término tecnológico reciente en el que muchos autores no tienen
 un conceso definitivo de su definición, a continuación, se presentan las
 definiciones de diferentes autores.
 
\end_layout

\begin_layout Standard
R.
 Davis, Jennifer and Daniels, Effective DevOps, [4]: “DevOps es una forma
 de pensar y de trabajar.
 Es un marco para compartir historias y desarrollar la empatía, permitiendo
 a las personas y a los equipos aplicar sus conocimientos de manera eficaz
 y duradera.
 Es parte del tejido cultural que da forma a cómo trabajamos y por qué.
 Mucha gente piensa en DevOps como herramientas específicas como Chef o
 Docker, pero herramientas por sí solas no son DevOps.
 Lo que hace que las herramientas sean "DevOps" es la forma de su uso, no
 características fundamentales de las propias herramientas.” Gonzalez, Implementi
ng Modern DevOps [5]: “DevOps es una filosofía más que un conjunto de herramient
as o un procedimiento: tener a tus ingenieros expuestos a todo el ciclo
 de vida de tu producto requiere mucha disciplina, pero te da un enorme
 control sobre lo que se está construyendo.
 Si los ingenieros entienden el problema, lo resolverán; es lo que saben
 hacer.” J.
 Smith, Operations Anti-Patterns, [6]: “DevOps es un conjunto de prácticas
 de desarrollo de software que combina una mentalidad de desarrollo de software
 con otras funciones de la organización.
 DevOps pone un gran énfasis en las responsabilidades compartidas entre
 todos los equipos a lo largo del ciclo de vida del desarrollo de software.
 Los bordes de las funciones de trabajo de trabajo se suavizan, ya que los
 miembros del equipo de operaciones asumen tareas que tradicionalmente estaban
 más tradicionalmente más centradas en los desarrolladores, y los miembros
 del equipo de desarrollo hacen lo mismo.
 El término DevOps se asocia más comúnmente con el desarrollo (Dev) y las
 operaciones de TI (Ops), pero el enfoque puede extenderse también a otros
 grupos, incluyendo, entre otros, la seguridad (DevSecOps), el control de
 calidad, las operaciones de bases de datos y redes.” 
\end_layout

\begin_layout Standard
Jennifer Davis & Katherine Daniels, Efective DevOps [7] “Devops es un movimiento
 cultural que cambia la forma en que los individuos piensan sobre su trabajo,
 valora la diversidad del trabajo realizado, apoya los procesos intencionales
 que aceleran el ritmo de realización del valor por parte de las empresas
 y mide el efecto del cambio social y técnico.
 Es una forma de pensar y de trabajar que permite a los individuos y a las
 organizaciones desarrollar y mantener prácticas de trabajo sostenibles.
 Es un marco cultural para compartir historias y desarrollar la empatía,
 lo que permite a las personas y a los equipos practicar sus oficios de
 forma eficaz y duradera.” En resumen, DevOps se puede definir como una filosofía
 que está en constate evolución que agrupa buenas prácticas de industria
 para mejorar la entrega de productos de software a través de un cambio
 cultural que abarca personas, procesos y herramientas tecnológicas.
 
\end_layout

\begin_layout Subsubsection
Mitos 
\end_layout

\begin_layout Standard

\emph on
The DevOps Handbook:
\emph default
 [8] detalla un conjunto de mitos sobre DevOps
\end_layout

\begin_layout Standard

\series bold
DevOps es sólo para las startups:
\series default
 Aunque las prácticas de DevOps han sido pioneras en las empresas 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

unicornio
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

 de Internet a escala web, como Google, Amazon, Netflix y Etsy, cada una
 de estas organizaciones ha corrido, en algún momento de su historia, el
 riesgo de quebrar debido a los problemas asociados con las organizaciones
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

caballo
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

 más tradicionales: lanzamientos de código altamente peligrosos que eran
 propensos a fallas catastróficas, incapacidad para lanzar características
 lo suficientemente rápido como para vencer a la competencia, preocupaciones
 de cumplimiento, una incapacidad para escalar, altos niveles de desconfianza
 entre Desarrollo y Operaciones, y así sucesivamente.
\end_layout

\begin_layout Standard
Sin embargo, cada una de estas organizaciones fue capaz de transformar su
 arquitectura, sus prácticas técnicas y su cultura para crear los sorprendentes
 resultados que asociamos con DevOps [8]
\end_layout

\begin_layout Standard

\series bold
DevOps sustituye a Agile
\series default
: Los principios y prácticas de DevOps son compatibles con Agile, y muchos
 observan que DevOps es una continuación lógica del viaje de Agile que comenzó
 en 2001.
 Agile a menudo sirve como un habilitador eficaz de DevOps, debido a su
 enfoque en pequeños equipos que entregan continuamente código de alta calidad
 a los clientes.
\end_layout

\begin_layout Standard
Muchas prácticas de DevOps surgen si continuamos gestionando nuestro trabajo
 más allá del objetivo de 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

código potencialmente entregable
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

 al final de cada iteración, extendiéndolo a tener nuestro código siempre
 en un estado desplegable, con los desarrolladores comprobando en el tronco
 diariamente, y que demostramos nuestras características en entornos similares
 a la producción.[8]
\end_layout

\begin_layout Standard

\series bold
DevOps es incompatible con ITIL
\series default
: Muchos ven a DevOps como una reacción a ITIL o ITSM (Gestión de Servicios
 de TI), que se publicó originalmente en 1989.
 ITIL ha influido ampliamente en varias generaciones de profesionales de
 operaciones, incluido uno de los coautores, y es una biblioteca de prácticas
 en constante evolución destinada a codificar los procesos y las prácticas
 que sustentan las operaciones de TI de clase mundial, que abarcan la estrategia
, el diseño y el soporte del servicio.[8]
\end_layout

\begin_layout Standard

\series bold
DevOps significa eliminar las operaciones de TI, o 
\begin_inset Quotes eld
\end_inset

NoOps
\begin_inset Quotes erd
\end_inset

:
\series default
 Muchos interpretan erróneamente DevOps como la eliminación completa de
 la función de Operaciones de TI.
 Sin embargo, esto no suele ser así.
 Aunque la naturaleza del trabajo de Operaciones de TI puede cambiar, sigue
 siendo tan importante como siempre.
 Las operaciones de TI colaboran en una fase mucho más temprana del ciclo
 de vida del software con el departamento de desarrollo, que sigue trabajando
 con las operaciones de TI mucho después de que el código se haya desplegado
 en la producción.
\end_layout

\begin_layout Standard

\series bold
DevOps es sólo 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

infraestructura como código
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

 o automatización
\series default
: DevOps requiere normas culturales y una arquitectura que permita alcanzar
 los objetivos compartidos en todo el flujo de valor de TI.
 Esto va mucho más allá de la automatización.
 Como escribió Christopher Little, un ejecutivo de tecnología y uno de los
 primeros cronistas de DevOps, 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

DevOps no es sobre la automatización, al igual que la astronomía no es sobre
 los telescopios
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard

\series bold
DevOps es sólo para el software de código abierto:
\series default
 Aunque muchas historias de éxito de DevOps tienen lugar en organizaciones
 que utilizan software como la pila LAMP (Linux, Apache, MySQL, PHP), lograr
 resultados de DevOps es independiente de la tecnología que se utilice.
 Se han logrado éxitos con aplicaciones escritas en Microsoft.NET, COBOL
 y código ensamblador de mainframe, así como con SAP e incluso con sistemas
 integrados (por ejemplo, el firmware de HP LaserJet).
\end_layout

\begin_layout Subsubsection
Historia 
\end_layout

\begin_layout Standard
DevOps y sus prácticas técnicas, arquitectónicas y culturales resultantes
 representan una convergencia de muchos movimientos filosóficos y de gestión.
 Aunque muchas organizaciones han desarrollado estos principios de forma
 independiente, entender que DevOps es el resultado de un amplio trazo de
 movimientos.
\end_layout

\begin_layout Standard
DevOps es el resultado de aplicar los principios más fiables del ámbito
 de la fabricación física y el liderazgo al flujo de valor de las TI.
 DevOps se basa en cuerpos de conocimiento de Lean, la Teoría de las Restriccion
es, el Sistema de Producción Toyota, la ingeniería de resiliencia, las organizac
iones de aprendizaje, la cultura de la seguridad, los factores humanos y
 muchos otros.
 Otros contextos valiosos de los que se nutre DevOps son las culturas de
 gestión de alta confianza, el liderazgo de servicio y la gestión del cambio
 organizativo.
\end_layout

\begin_layout Standard
Aunque los fundamentos de DevOps pueden considerarse derivados de Lean,
 la teoría de las restricciones y el movimiento Toyota Kata, muchos también
 ven a DevOps como la continuación lógica del viaje del software ágil que
 comenzó en 2001.
\end_layout

\begin_layout Standard
Una de las primeras aproximaciones a las bases conceptuales se dio en la
 conferencia Agile de 2008 celebrada en Toronto (Canadá), donde Patrick
 Debois y Andrew Shafer celebraron una sesión sobre la aplicación de los
 principios Agile a la infraestructura en lugar de al código de la aplicación.
\end_layout

\begin_layout Standard
En la conferencia Velocity de 2009, John Allspaw y Paul Hammond dieron una
 charla seminal 
\begin_inset Quotes eld
\end_inset

10 Deploys per Day: Dev and Ops Cooperation at Flickr
\begin_inset Quotes erd
\end_inset

 en la que describieron cómo crearon objetivos compartidos entre el departamento
 de desarrollo y el de operaciones y utilizaron prácticas de integración
 continua para que el despliegue formara parte del trabajo diario de todos.
\end_layout

\begin_layout Standard
Patrick decidió entonces organizar un evento en Gante, Bélgica, llamado
 DevOpsDays.
 Esta vez, hubo mucho interés y la conferencia fue un éxito.
 El nombre de "DevOpsDays" caló hondo, y la conferencia se ha convertido
 en un evento recurrente.
 DevOpsDays se abrevió como "DevOps".
 [9] 
\end_layout

\begin_layout Subsubsection
Ciclo de vida 
\end_layout

\begin_layout Standard
El ciclo de vida iterativo en DevOps consta de los siguientes etapas o fases
\end_layout

\begin_layout Enumerate

\series bold
Plan
\series default
: Sin importar la metodología que a utilizar como Waterfall o Agile, en
 esta primera etapa se definen las labores del equipo, los requerimientos
 necesarios a implementar en la plataforma o producto 
\end_layout

\begin_layout Enumerate

\series bold
Code
\series default
: En esta fase se empieza a escribir el código necesario para resolver los
 problemas que plantearon en el paso de plan.
 Todo este código deber estar almacenado en un repositorio de código fuente
 centralizado 
\end_layout

\begin_layout Enumerate

\series bold
Build
\series default
: En esta fase, el desarrollo de software se lleva a cabo constantemente.
 dividiendo, todo el proceso de desarrollo en pequeños ciclos.
 Esto beneficia al equipo de DevOps para acelerar el desarrollo de software
 y el proceso de entrega.
 
\end_layout

\begin_layout Enumerate

\series bold
Test
\series default
: El equipo de QA usa herramientas para identificar y corregir errores en
 el nuevo código de manera continua.
 
\end_layout

\begin_layout Enumerate

\series bold
Release
\series default
: En esta fase, la nueva funcionalidad se integra con el código existente
 y se llevan a cabo las pruebas.
 El desarrollo continuo sólo es posible debido a la integración y las pruebas
 continuas.
 
\end_layout

\begin_layout Enumerate

\series bold
Deploy
\series default
: En esta etapa, el proceso de implementación tiene lugar continuamente.
 Se realiza de tal manera que cualquier cambio realizado en cualquier momento
 en el código, no debe afectar el funcionamiento del sitio web de alto tráfico.
 
\end_layout

\begin_layout Enumerate

\series bold
Operate
\series default
: En esta fase, el equipo de operación se encargará del comportamiento inadecuad
o del sistema o de los errores que se encuentran en la producción trabajando
 siempre sobre un sistema sólido y estable.
 
\end_layout

\begin_layout Enumerate

\series bold
Monitor
\series default
: Esta última etapa de un proceso DevOps, es una fase permanente y que se
 aplica a todo el ciclo completo.
 Aquí el equipo de operación se encargará de definir las medidas para monitoriza
r y controlar el estado de salud de las aplicaciones y su infraestructura.
 
\end_layout

\begin_layout Subsubsection
Practicas DevOps 
\end_layout

\begin_layout Standard
Las fases DevOps, son solo la clasificación de una o más etapas de ciclo
 de vida en bloques con un propósito definido.
 En las figuras Figura 2 6 y Figura 2 7 se muestran las diferentes fases
 que involucran el ciclo de vida DevOps.
\end_layout

\begin_layout Itemize

\series bold
Continuous Development:
\series default
 
\end_layout

\begin_layout Standard
En esta fase, se planifica el ciclo de vida del desarrollo de software,
 se codifica la solución con buenas prácticas de código fuente y se almacena
 en un repositorio de control de versiones.
 El código se extrae para realizar una integración continua para crear una
 compilación y probarla en el servidor de pruebas y, finalmente, desplegarla
 en la producción.
\end_layout

\begin_layout Itemize

\series bold
CT (Continuos Testing): 
\series default
 
\end_layout

\begin_layout Standard
Esta fase se encarga de probar todos los cambios a través de pruebas automatizad
as para evaluar la calidad del software en cada paso del proceso de entrega
 continua mediante pruebas tempranas y frecuentes.
\end_layout

\begin_layout Itemize

\series bold
CI (Continuous Integration): 
\series default
 
\end_layout

\begin_layout Standard
Es una práctica de desarrollo de software mediante la cual los desarrolladores
 combinan los cambios en el código en un repositorio central de forma periódica,
 tras lo cual se ejecutan versiones y pruebas automáticas.
 Los objetivos clave de la integración continua consisten en encontrar y
 arreglar errores con mayor rapidez, mejorar la calidad del software y reducir
 el tiempo que se tarda en validar y publicar nuevas actualizaciones de
 software.
\end_layout

\begin_layout Itemize

\series bold
CD (Continuos Deployment):
\series default
 
\end_layout

\begin_layout Standard
En esta fase se compilan, prueban y preparan automáticamente los cambios
 en el código y se entregan a la fase de producción.
 Amplía la integración continua al implementar todos los cambios en el código
 en un entorno de pruebas o de producción después de la fase de creación.
\end_layout

\begin_layout Standard
Cuando la entrega continua se implementa de manera adecuada, los desarrolladores
 dispondrán siempre de un artefacto listo para su implementación que se
 ha sometido a un proceso de pruebas estandarizado.
\end_layout

\begin_layout Itemize

\series bold
Continuos Monitoring:
\series default
 
\end_layout

\begin_layout Standard
Esta fase de encarga de supervisar e identificar los problemas de cumplimiento
 y los riesgos de seguridad a lo largo de cada fase de los ciclos de vida
 de DevOps y de las operaciones de TI.
 El monitoreo continuo puede considerarse como el paso final del proceso
 de DevOps.
 Es uno de los pasos más cruciales del ciclo de vida de DevOps y ayudará
 a conseguir una verdadera eficiencia y escalabilidad.
\end_layout

\begin_layout Subsubsection
¿Qué no es DevOps? 
\end_layout

\begin_layout Standard
Se tiende a pensar que es un término relacionado con empresas tecnológicas
 en exclusiva, como Netflix, Facebook, LinkedIn o Google.
 Si bien estas empresas fueron pioneras, los principios de DevOps son abiertos
 y quizá sin saberlo, tu empresa ya aplica alguna de sus premisas, como
 por ejemplo Agile o Lean.
\end_layout

\begin_layout Standard
Del mismo modo se tiende a pensar equivocadamente que todos los miembros
 de los equipos tengan que aprender de todo (desarrollo software, testing,
 operaciones, etc.).
 En realidad, esto es completamente falso.
 DevOps no dice que los equipos de operaciones tengan que saber programar
 ni viceversa, si bien es cierto que ambos hacen uso de scripts para administrar
 entornos o realizan tareas con elementos software, en realidad lo que se
 pretende es que cada área tenga una noción de las funciones y tecnologías
 que usan el resto.
 De este modo, todos pueden entender y participar de manera activa en el
 desarrollo de un proyecto (control de versiones, rastreo de errores, etc.)
 y de esta manera contribuir al ciclo de vida del software sobre el que
 trabajan y aportar valor al negocio.
\end_layout

\begin_layout Standard
No existe un rol de DevOps `per se'.
 Si se encuentra un currículum que diga que alguien es ingeniero en DevOps
 se debe desconfiar.
 DevOps es cultura, herramientas y buenas prácticas para hacer una organización,
 una organización altamente colaborativa entre equipos a distintos niveles
 para entregar productos de valor al cliente.
\end_layout

\begin_layout Standard
No existe una biblia o manual DevOps, que contenga las instrucciones necesarias
 para realizar dicha transformación.
 DevOps se basa en las experiencias positivas y negativas que van acumulando
 los profesionales relacionados con la transformación digital, y por tanto
 se encuentra en constante evolución tanto tecnológicamente, a través de
 sus herramientas, como en cuanto al resto de elementos que lo componen.
 Y debe adaptarse siempre a la situación inicial de la empresa donde quiera
 aplicarse.
\end_layout

\begin_layout Subsubsection
Métricas de rendimiento 
\end_layout

\begin_layout Standard
\noindent
Forsgreen 2018 [11] presenta 4 características para medir el rendimiento
 en la entrega de software que se han extendido y popularizado en la industria,
 Estas métricas se han son comunes en los reportes anuales State of DevOps
 de las compañías Puppet y el proyecto DORA.
\end_layout

\begin_layout Standard
\noindent

\series bold
Deployment frequency: 
\series default
Es la frecuencia con que la organización despliega el código en producción
 o lo libera para los usuarios finales
\end_layout

\begin_layout Standard
\noindent

\series bold
Lead time: 
\series default
Es el tiempo que se tarda en pasar de un commit de código a un código que
 se ejecuta con éxito en producción (cuánto tiempo dedica el equipo a implementa
r, testear y entregar código a los usuarios.)
\end_layout

\begin_layout Standard
\noindent

\series bold
Change Fail Rate: 
\series default
Es el porcentaje de cambios de código que requieren correcciones en vivo
 u otros ajustes que afecten el rendimiento y degraden el servicio después
 del despliegue en producción (se mide como cambios fallidos vs cambios
 exitosos)
\end_layout

\begin_layout Standard
\noindent

\series bold
Mean Time to Restore (MTTR): 
\series default
Es el tiempo medio que se necesita para restablecer un servicio cuando ocurre
 un fallo en producción
\end_layout

\begin_layout Standard
La Figura 2 9 tomada del reporte Accelerate State of DevOps 2021 [12], presenta
 la tendencia de industria frente a las métricas DevOps para las cuatro
 medidas de rendimiento, donde el nivel elite se caracteriza por tener tiempos
 de respuesta de menos de una hora, ejemplo frecuencias de despliegue por
 día bajo demanda, tiempo de espera de despliegue de cambios de menos de
 una hora, tiempo de restablecimiento ante fallos de menos de una hora y
 por ultimo una tasa de errores en producción entre el 0 y 15 %.
 
\end_layout

\begin_layout Standard
Por otro lado, la Figura 2 10 muestra la evolución de la industria en los
 últimos tres años sobre las cuatro categorías de madurez, se evidencia
 la mejora en cifras porcentuales de las categorías Elite y High, lo que
 presenta una tendencia de mejora constante de las compañías por potenciar
 sus capacidades y métricas de entrega de software.
 Se resalta el incremento del 19% de la categoría Elite en solo 3 años (2018
 y 2021) 
\end_layout

\begin_layout Subsubsection
Pilares y Objetivos DevOps
\end_layout

\begin_layout Standard
Los objetivos DevOps más comunes en las organizaciones desde el punto de
 vista de Impulsores del negocio ayudan a determinar las métricas y capacidades
 en que la organización se debe centrar.
 haciendo énfasis que en DevOp.
 (Coupland 2021 [10] ) 
\end_layout

\begin_layout Itemize

\series bold
Deployment frequency: 
\series default
Es la frecuencia con que la organización despliega el código en producción
 o lo libera para los usuarios finales 
\end_layout

\begin_layout Itemize

\series bold
Faster time to market:
\series default
 Reducir la cantidad de tiempo que se necesita desde el inicio de la idea
 hasta el lanzamiento del producto 
\end_layout

\begin_layout Itemize

\series bold
Lower failure rates:
\series default
 Lograr menores tasas de fallos gracias a que los equipos (multifuncionales)
 colaboran entre sí y se comunican mejor 
\end_layout

\begin_layout Itemize

\series bold
Shorter lead times:
\series default
 Reducir el tiempo que transcurre entre el inicio del trabajo en una historia
 de usuario y la publicación de la misma en producción.
 
\end_layout

\begin_layout Standard
Puede tratarse de cualquier cosa, desde la planificación, en la que se obtienen
 los requisitos de forma más eficaz, hasta la construcción de la infraestructura
 más rápida que antes.
\end_layout

\begin_layout Itemize

\series bold
Improved recovery time:
\series default
 El tiempo de indisponibilidad representa una pérdida de ingresos y un daño
 a la reputación de su organización, por lo que es muy importante reducir
 ese nivel de indisponibilidad.
 
\end_layout

\begin_layout Subsubsection
Estrategias de adopción DevOps
\end_layout

\begin_layout Standard
(Sharma 2017 [13]) La Figura 2 11 presenta las estrategias tácticas de mejora
 más comunes en las organizaciones al momento de iniciar un camino de adopción
 DevOps: 
\end_layout

\begin_layout Enumerate

\series bold
Mejora de los procesos:
\series default
 ¿cómo hacer que los procesos sean ágiles y eficientes mediante la eliminación
 de los residuos? 
\end_layout

\begin_layout Enumerate

\series bold
Herramientas para la automatización:
\series default
 ¿Cómo automatizar los procesos de mejora con herramientas para hacerlos
 repetibles y escalables, y para reducir los errores? 
\end_layout

\begin_layout Enumerate

\series bold
Plataforma y entornos:
\series default
 ¿cómo hacer que las plataformas y los entornos para la canalización de
 la entrega de aplicaciones, desde los requisitos hasta la producción, sean
 resistentes, elásticos, escalables y capaces de gestionar las configuraciones?
 
\end_layout

\begin_layout Enumerate

\series bold
Cultura:
\series default
 ¿cómo fomentar una cultura de confianza, comunicación y colaboración? 
\end_layout

\begin_layout Section
Estado del arte
\end_layout

\begin_layout Subsection
Trabajos relacionados 
\end_layout

\begin_layout Standard
DevOps y calidad de software.
\end_layout

\begin_layout Standard
En la búsqueda de literatura sobre estos temas existen miles de artículos
 que enfocan DevOps y muchos más en calidad de software, lo que se busca
 con este análisis es identificar los documentos más relevantes que unan
 estos dos conceptos en pro de asegurar que se entreguen soluciones funcionales
 en periodos de tiempo moderados y que cumplan con buenas prácticas de calidad,
 documentación y mantenibilidad.
\end_layout

\begin_layout Standard
Ordóñez 2020 en [14] presentan un conjunto de lineamientos para la implementació
n del modelo CALMS para DevOps en miPymes de desarrollo de software en el
 contexto suramericano, en donde se describen los aspectos de cambios organizaci
onal a tener en cuenta, como temas técnicos relacionados a las herramientas
 utilizadas para la creación de un pipelin e de integración y despliegue
 continuo.
 Presentan los resultados de aplicar dicho modelo en una empresa mipyme
 obteniendo grandes resultados en términos de despliegues, pasando de un
 despliegue semanal a un despliegue diario.
 Como conclusión adicional dicen la que 
\begin_inset Quotes eld
\end_inset

la adopción de DevOps debe ser gradual, iterativa e incremental
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
A.
 Mishra and Z.
 Otaiwi 2020 en [15] presentan un mapeo sistemático del impacto de DevOps
 en la calidad del software analiza las implicaciones de las características
 de DevOps en la calidad del software, proporcionando una mejor comprensión
 de la estrecha relación que se puede generar DevOps en la calidad del software,
 concluyendo que DevOps contribuye positivamente en el aseguramiento de
 la calidad de software.
\end_layout

\begin_layout Standard
Perera and Silva (2017) [16], realiza un estudio sobre el impacto de la
 práctica DevOps en la calidad del software basándose en explorar las prácticas
 actuales de DevOps en la industria y los factores clave que llevaron a
 esta conclusión.
 El autor nos indica que se fundamentó en un sondeo de la experiencia de
 expertos para determinar cómo mejorar la calidad de software a partir de
 la práctica de DevOps.
 Expresan una ecuación para la medición cualitativa de la calidad de software
 a partir en la correlación de 5 pilares de la cultura DevOps, Cultura,
 Automatización, Medición, Compartir.
\end_layout

\begin_layout Standard
V.
 L.
 Cruz and A.
 B.
 Albuquerque 2018 en [17], presentan una experiencia de despliegue de DevOps
 para aplicaciones Legacy o heredados.
 En este documento se presentaron las herramientas y las modificaciones
 necesarias para que un proyecto Legacy se integre en un flujo DevOps basándose
 en los siguientes subprocesos
\end_layout

\begin_layout Itemize
Integración continua.
 
\end_layout

\begin_layout Itemize
Automatización de la implementación 
\end_layout

\begin_layout Itemize
Automatización de pruebas 
\end_layout

\begin_layout Itemize
Automatización del monitoreo 
\end_layout

\begin_layout Itemize
Automatización de la infraestructura 
\end_layout

\begin_layout Standard
ACIS 2018 en [18] hace referencia a un estudio a 1.200 ejecutivos de TI sobre
 el uso de Agile y DevOps en la transformación digita en el que presenta
 las características de los 
\begin_inset Quotes eld
\end_inset

Maestros en Agilidad
\begin_inset Quotes erd
\end_inset

 (18% de los encuestados), de las cuales forman parte las organizaciones
 más cercanas a la adopción total y que realizan las principales, o casi
 todas, las acciones para hacer de Agile y DevOps una parte esencial de
 sus operaciones diarias.
 Estos 
\begin_inset Quotes eld
\end_inset

Maestros en Agilidad
\begin_inset Quotes erd
\end_inset

 también están más propensos a utilizar prácticas del enfoque Agile en otras
 funciones de la empresa, por lo que el aumento del 60% en los ingresos
 y ganancias y la probabilidad de expandir sus negocios es 2,4 veces mayor
 - con una tasa de aumento por encima del 20% -, no es sólo una coincidencia.
\end_layout

\begin_layout Subsection
Modelos de Madurez DevOps
\end_layout

\begin_layout Standard
En la literatura no existe un método único o definitivo para implementar
 DevOps, esto se da porque cada organización es diferente y particular,
 en donde la adopción DevOps se da a partir de analizar y medir las la organizac
ión en términos de capacidades particulares y modelos de referencia:
\end_layout

\begin_layout Subsubsection
Accelerate
\end_layout

\begin_layout Standard
El libro Accelerate (Forsgren 2018 [11]) presenta el resultado de analizar
 23000 respuestas de encuestas de organizaciones y profesionales que trabajaban
 con DevOps recopilados en 4 años de investigación entre 2014 y 2017, hallando
 24 capacidades, agrupadas en 5 categorías dimensionales que a nivel estadístico
 impulsan las mejoras en el rendimiento de la entrega de software y el desempeño
 organizacional de la siguiente forma: (ver imagen Figura 2 12 Modelo grafico
 general de la investigación propuesto por Forsgren 2018 [11])
\end_layout

\begin_layout Standard
Dimensiones o Categorías del modelo 
\end_layout

\begin_layout Itemize
Entrega continua 
\end_layout

\begin_layout Itemize
Arquitectura 
\end_layout

\begin_layout Itemize
Producto y Procesos 
\end_layout

\begin_layout Itemize
Gestión Lean y Monitorización 
\end_layout

\begin_layout Itemize
Cultura 
\end_layout

\begin_layout Standard
Capacidades y categorías
\end_layout

\begin_layout Standard
\noindent

\series bold
\emph on
Entrega continua
\end_layout

\begin_layout Enumerate
Utilizar control de versiones para todos los artefactos de producción 
\end_layout

\begin_layout Enumerate
Automatizar el proceso de despliegue 
\end_layout

\begin_layout Enumerate
Implementar integración continua 
\end_layout

\begin_layout Enumerate
Utilizar métodos de desarrollo 
\begin_inset Quotes eld
\end_inset

Trunk-Based
\begin_inset Quotes erd
\end_inset

 
\end_layout

\begin_layout Enumerate
Implementar pruebas automáticas 
\end_layout

\begin_layout Enumerate
Implementar gestión de los datos de prueba 
\end_layout

\begin_layout Enumerate
Incorporar los aspectos de seguridad en las fases de diseño y pruebas (shift
 left de la seguridad) 
\end_layout

\begin_layout Enumerate
Implementar entrega continua de software 
\end_layout

\begin_layout Standard

\series bold
\emph on
Arquitectura
\end_layout

\begin_layout Enumerate
Utilizar arquitecturas de bajo acoplamiento 
\end_layout

\begin_layout Enumerate
Permitir a los equipos definir sus propias arquitecturas 
\end_layout

\begin_layout Standard

\series bold
\emph on
Producto y Procesos
\end_layout

\begin_layout Enumerate
Recolectar e implementar las recomendaciones (feedback) de los clientes
 
\end_layout

\begin_layout Enumerate
Hacer visible el flujo de trabajo durante todo el ciclo 
\end_layout

\begin_layout Enumerate
Trabajar con lotes o cantidades pequeñas 
\end_layout

\begin_layout Enumerate
Fomentar y habilitar al equipo para realizar experimentos 
\end_layout

\begin_layout Standard

\series bold
\emph on
Gestión Lean y Monitorización
\end_layout

\begin_layout Enumerate
Tener un proceso liviano para la aprobación de cambios 
\end_layout

\begin_layout Enumerate
Monitorizar las aplicaciones y la infraestructura para tomar decisiones
 de negocio 
\end_layout

\begin_layout Enumerate
Monitorizar la salud de los servicios y aplicaciones proactivamente 
\end_layout

\begin_layout Enumerate
Administrar y establecer límites para el trabajo en progreso (Work-In-Progress)
 
\end_layout

\begin_layout Enumerate
Visualizar el trabajo para monitorizar la calidad y comunicarlo al equipo
 
\end_layout

\begin_layout Standard

\series bold
\emph on
Cultura
\end_layout

\begin_layout Enumerate
Implementar una cultura tipo generativa 
\end_layout

\begin_layout Enumerate
Animar y apoyar al equipo a aprender 
\end_layout

\begin_layout Enumerate
Apoyar y facilitar la colaboración entre los equipos 
\end_layout

\begin_layout Enumerate
Proporcionar recursos y herramientas para que el trabajo sea significativo
 para los individuos 
\end_layout

\begin_layout Enumerate
Apoyar el liderazgo transformacional 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename D:/OneDrive - Pontificia Universidad Javeriana Cali/Trabajo de Grado/Avances/Formato lyx/imagenes/modelo accelerate.png
	scale 60

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Modelo general de la investigación propuesto por Forsgren 2018 
\begin_inset CommandInset citation
LatexCommand citep
key "10.5555/3235404"
literal "false"

\end_inset

[11] 
\begin_inset CommandInset label
LatexCommand label
name "fig:Modelo-general-accelerate"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\size tiny
Imagen tomada del libro: Accelerate: The Science of Lean Software and DevOps
 Building and Scaling High Performing Technology Organizations 
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Modelo CALMS 
\end_layout

\begin_layout Standard
CALMS, es un acrónimo que significa Cultura, Automatización, Lean, Medición
 y Sharing (Compartir).
 Una serie de puntos clave que resultan particularmente útiles para analizar
 la estructura de una organización.
 Simple pero efectivo, CALMS marca las directrices para todas las partes
 interesadas, marcando claramente qué hay que implementar, así como pautas
 y herramientas para articular e integrar las diferentes partes y procesos
 de cara a automatizarlos u optimizarlos al máximo para lograr los mejores
 resultados posibles y esto, de alguna manera, es lo que permite hablar
 plenamente de DevOps dentro de una organización.
 La 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Modelo-CALM-para-DevOps"
plural "false"
caps "false"
noprefix "false"

\end_inset

 presenta la presentación grafica de como los pilares CALM se apoyan en
 la culura y son la base para lograr una trasnformación digital.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\series bold
Cultura
\series default
: Este punto es crucial en una organización.
 El conocimiento de cómo funciona una organización y conseguir involucrar
 a sus actores para generar valor es especialmente importante para lograr
 que todos los actores se involucren y no solo los departamentos técnicos.
\end_layout

\begin_layout Standard
La cultura en una organización es el conjunto de saberes, creencias y pautas
 de conducta, incluyendo los medios materiales que usan sus miembros para
 comunicarse entre sí, y resolver sus necesidades.
\end_layout

\begin_layout Standard

\series bold
Automatización:
\series default
 Liberar a los equipos de tareas repetitivas o redundantes, logra que los
 diferentes equipos puedan concentrarse en tareas más productivas.
\end_layout

\begin_layout Standard
En este sentido, DevOps propone la aplicación de herramientas que automaticen
 gran parte de los procesos existentes a lo largo del ciclo de vida como:
\end_layout

\begin_layout Standard
Automatización de las revisiones de código.
 Automatización de la construcción y del despliegue.
 Automatización de los controles de calidad.
 Automatización del aprovisionamiento de infraestructuras.
\end_layout

\begin_layout Standard

\series bold
Lean
\series default
: El desarrollo de software Lean tiene 7 principios, y el primero es 
\begin_inset Quotes eld
\end_inset

eliminar los desperdicios
\begin_inset Quotes erd
\end_inset

, es decir, todo aquello redundante y que supone una pérdida de tiempo ya
 que no aporta valor.
 Estos son:
\end_layout

\begin_layout Itemize
Código o funcionalidad innecesaria en las aplicaciones.
 
\end_layout

\begin_layout Itemize
Sobrepasar la capacidad del equipo, o empezar más de lo que puede terminarse.
 
\end_layout

\begin_layout Itemize
Requisitos poco claros o con cambios constantes.
 
\end_layout

\begin_layout Itemize
Burocracia.
 
\end_layout

\begin_layout Itemize
Comunicación lenta o inefectiva 
\end_layout

\begin_layout Itemize
Trabajo parcialmente terminado 
\end_layout

\begin_layout Itemize
Defectos o problemas de calidad 
\end_layout

\begin_layout Itemize
Cambio de tareas 
\end_layout

\begin_layout Standard

\series bold
Medición 
\series default
(Metrics) Lo que puede medirse puede gestionarse.
 Dicho de otra manera, lo que se mide se puede gestionar de forma eficaz,
 y DevOps también pone el foco en esta parte.
\end_layout

\begin_layout Standard
El uso de métricas da visibilidad sobre el estado real de un proyecto de
 forma que los responsables de los equipos, y sus miembros coordinen acciones
 coherentes con los objetivos corporativos, alineando la visión y la estrategia
 de la organización.
\end_layout

\begin_layout Standard
La medición es el combustible que alimenta el motor DevOps que se centra
 en la mejora continua, basada en el 
\begin_inset Quotes eld
\end_inset

empirismo
\begin_inset Quotes erd
\end_inset

, y por tanto en la experiencia y los datos obtenidos.
\end_layout

\begin_layout Standard

\series bold
Compartir 
\series default
(Share) La creación de valor surge de la colaboración, del aprovechamiento
 de experiencias y conocimientos multidisciplinares del equipo.
 Gracias a compartir conocimiento los integrantes del equipo, y de otras
 áreas, pueden tener acceso al mismo, de modo que formaran parte del modelo
 de referencia para un proceso iterativo de aprendizaje y mejora continua,
 optimizando iterativamente los procesos de la organización.
\end_layout

\begin_layout Standard
Compartir también implica invertir en políticas de desarrollo de talento
 e innovación, que faciliten o permitan cambios dentro de la cultura de
 la organización.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename D:/OneDrive - Pontificia Universidad Javeriana Cali/Trabajo de Grado/Avances/Formato lyx/imagenes/devopsgroup_calms_model_watermark_001-01.svg
	lyxscale 60
	scale 60

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Modelo CALM para DevOps
\begin_inset CommandInset label
LatexCommand label
name "fig:Modelo-CALM-para-DevOps"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\size tiny
Imagen tomada de 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.devopsgroup.com/insights/resources/diagrams/all/calms-model-of-devops
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
OWASP DevSecOps Maturity Model [19] 
\end_layout

\begin_layout Standard
El Modelo de Madurez DevSecOps (DSOMM ), se enfoca en analizar aspectos
 de seguridad que muchos de los modelos usados en el mercado descuidan,
 creando un modelo de enfocado en mejorar la seguridad.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename D:/OneDrive - Pontificia Universidad Javeriana Cali/Trabajo de Grado/Avances/Formato lyx/imagenes/modelo de madurez devsecops.png
	lyxscale 60
	scale 40

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Modelo de madurez Devsecops de OWASP
\begin_inset CommandInset label
LatexCommand label
name "fig:Modelo-de-madurez-devsecops"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\size tiny
Imagen tomada de 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://dsomm.timo-pagel.de/spiderweb.php
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Los niveles de implementación en DSOMM son:
\end_layout

\begin_layout Itemize
Nivel 1: Comprensión básica de las prácticas de seguridad 
\end_layout

\begin_layout Itemize
Nivel 2: Adopción de prácticas básicas de seguridad 
\end_layout

\begin_layout Itemize
Nivel 3: Adopción elevada de prácticas de seguridad 
\end_layout

\begin_layout Itemize
Nivel 4: Implantación avanzada de prácticas de seguridad a escala 
\end_layout

\begin_layout Standard
Dimensiones de DevOps
\end_layout

\begin_layout Itemize
Construcción y despliegue 
\end_layout

\begin_layout Itemize
Cultura y organización 
\end_layout

\begin_layout Itemize
Recogida de información 
\end_layout

\begin_layout Itemize
Endurecimiento 
\end_layout

\begin_layout Itemize
Prueba y verificación 
\end_layout

\begin_layout Subsection
Modelos de medición de DevOps 
\end_layout

\begin_layout Subsubsection
Devops Health Radar Assessment
\end_layout

\begin_layout Standard
Es un modelo de evaluación de las capacidades DevOps desarrollador por la
 compañía AgilityHealth para para los programas y/o equipos de entrega de
 tecnología con el fin de medir y visualizar su estado de madurez DevOps
 e identificar las áreas clave de crecimiento y desarrollar un plan de acción
 de crecimiento concreto.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename D:/OneDrive - Pontificia Universidad Javeriana Cali/Trabajo de Grado/Avances/Formato lyx/imagenes/modelo de evaluacion - health radar.png
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Modelo de evaluación de la salud de DevOps - DevOps Health Radar
\begin_inset CommandInset label
LatexCommand label
name "fig:Modelo-de-evaluación-health-radar"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\size tiny
Imagen tomada de 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://agilityhealthradar.com/wp-content/uploads/2018/09/DevOps-Health-Radar_Web.
pdf
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Dora Assessment
\end_layout

\begin_layout Section
Antecedentes
\end_layout

\begin_layout Subsection
Alianza Bioveristy - CIAT 
\end_layout

\begin_layout Standard
La Alianza entre Bioversity International y el Centro Internacional de Agricultu
ra Tropical, en adelante CIAT, es unión de fuerzas entre dos centros de
 investigación que en conjunto suman más de 100 años de experiencia aplicando
 ciencia para abordar retos mundiales.
 Esta alianza se creó para enfrentar las crisis de cambio climático, pérdida
 de la biodiversidad, degradación ambiental y malnutrición, y para maximizar
 las oportunidades combinando nuestras fortalezas en puntos claves en el
 sistema alimentario.
 La alianza es parte del CGIAR, el mayor consorcio mundial en investigación
 e innovación agrícola para un futuro sin hambre, dedicado a reducir la
 pobreza, contribuir a la seguridad alimentaria y nutricional y mejorar
 los recursos naturales.
 
\end_layout

\begin_layout Standard
La alianza oficializó su operación conjunta en el 2020 con presencia a nivel
 mundial representada en 4 sedes distribuidas en 4 continentes:
\end_layout

\begin_layout Itemize
Oficina Principal- Roma, Italia 
\end_layout

\begin_layout Itemize
Sede Regional para las Américas - Palmira, Colombia 
\end_layout

\begin_layout Itemize
Sede Regional para África - Nairobi, Kenia 
\end_layout

\begin_layout Itemize
Sede Regional para Asia - Hanoi, Vietnam 
\end_layout

\begin_layout Standard
El manejo de los procesos y recursos informáticos de la organización está
 bajo el manejo del área de integración tecnológica cuya principal responsabilid
ad es apoyar la operación de la organización a través de la prestación y
 soporte de servicios tecnológicos en cada una de las sedes regionales.
 El área tiene alcance y cobertura global concentrando la mayor parte de
 su recurso humano en la oficina principal (antiguo Bioversity) y en la
 sede de las américas (antiguo CIAT).
 La 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Estructura-Organizacional-CIAT"
plural "false"
caps "false"
noprefix "false"

\end_inset

 presenta la distribución del área de Integración Tecnológica y sus cinco
 subáreas especializadas: 
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename D:/OneDrive - Pontificia Universidad Javeriana Cali/Trabajo de Grado/Avances/Formato lyx/imagenes/estructura organizacional ciat.png
	scale 60

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Estructura Organizacional del área de integración tecnológica Alianza Bioversity
 -CIAT
\begin_inset CommandInset label
LatexCommand label
name "fig:Estructura-Organizacional-CIAT"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
El departamento de integración tecnológica cubre todo el soporte operativo
 de la organización a nivel global, a nivel de desarrollo de software las
 áreas involucradas son:
\end_layout

\begin_layout Itemize
Integración de sistemas, responsable por el funcionamiento y operación de
 las soluciones y servicios relacionados con la operación de la compañía.
 El área está compuesta por 10 personas de los cuales 6 están directamente
 relacionados con desarrollo de software así: 3 desarrolladores, 1 administrador
 de bases de datos, 1 jefe de desarrollo y el gerente del área, el resto
 del área tienen dedicación exclusiva a temas del ERP.
 
\end_layout

\begin_layout Itemize
Redes de TI, infraestructura y seguridad, encargados de la gestión de la
 infraestructura física de red y operación de los servidores y servicios
 informáticos de la compañía.
 De esta hay 3 personas directamente involucrados con desarrollo de software,
 en tareas como administración de servidores, seguridad de red y servicios
 y la gerencia del área.
 
\end_layout

\begin_layout Itemize
Innovación de TI y desarrollo de negocio, es otra área donde se hace desarrollo
 de software, focalizados en soluciones de gestión para programas de investigaci
ón a nivel del consorcio CGIAR, el área está compuesta de 10 personas de
 los cuales 6 están dedicados a temas asociados a desarrollo de software.
 
\end_layout

\begin_layout Standard
A nivel de infraestructura la compañía cuenta con un centro de datos propio
 administrado por el área de redes de TI, allí están alojados mediante servidore
s virtualizados los diferentes ambientes de servidores y servicios utilizados
 en las diferentes etapas del desarrollo de software.
 
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Explicar aquí el organigrama más en detalle sobre el CIAT.
 Explicar cuántas personas tiene el área de sistemas de integración y cuántos
 se encargan de la parte del desarrollo.
 
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
CIAT y DevOps 
\end_layout

\begin_layout Standard
El CIAT, es una empresa de investigación en agricultura, no especializada
 como una compañía de desarrollo de software, a pesar de que el software
 es indispensable para la operación administrativa y el apoyo en los procesos
 de análisis científico propios del tipo de compañía ha enfocado sus esfuerzos
 en mantener la operación y desarrollar soluciones a medida para sus procesos
 particulares.
 El termino DevOps no ha sido ajeno a la organización y durante los últimos
 2 años los equipos integración de sistemas y redes han recurrido a consultores
 externos para la implementación pilotos de adopción que no han extendido
 de la forma esperada dentro de la misma área.
 
\end_layout

\begin_layout Standard
Uno de los principales factores para el estancamiento del piloto de adopción
 DevOps, fue que el proceso solo se centró en la parte técnica, instalando
 herramientas e implementando mecanismos de integración entre ellas y las
 herramientas existentes, dejando de lado el análisis del estado los procesos
 de desarrollo y entrega de software, la capacidad de los equipos, las políticas
 y metodologías de aseguramiento de calidad.
 
\end_layout

\begin_layout Standard
La 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Estructura-Organizacional-CIAT"
plural "false"
caps "false"
noprefix "false"

\end_inset

 Figura 2 17 presenta el grupo de aplicaciones que contaba la organización
 antes y las herramientas que se instalaron e integraron después de adoptar
 el piloto DevOps, en este punto se resalta que aprovechando que la compañía
 cuenta con un centro de datos propios, todos los servicios mencionados
 en la gráfica fueron instalados localmente en servidores virtuales propios
 para uso interno.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename D:/OneDrive - Pontificia Universidad Javeriana Cali/Trabajo de Grado/Avances/Formato lyx/imagenes/modelo de capaciades-herrmientas DevOps de ciat.png
	scale 60

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Herramientas DevOps instaladas en CIAT
\begin_inset CommandInset label
LatexCommand label
name "fig:Herramientas-DevOps-instaladas-en-CIAT"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
El piloto de integración DevOps implementado, contempló pasos básicos de
 integración continua como instalar un orquestador, construir la aplicación
 a través de la herramienta Maven tomando librerías de repositorio local
 (Nexus), ejecutar un análisis de código estático y desplegar el producto
 final generado en un servidor de aplicaciones de pruebas (Ver 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Pipeline-de-despliegue-implementado"
plural "false"
caps "false"
noprefix "false"

\end_inset

 Figura 2 18 Pipeline de despliegue implementado en CIAT como piloto DevOps).
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename D:/OneDrive - Pontificia Universidad Javeriana Cali/Trabajo de Grado/Avances/Formato lyx/imagenes/modelo de capaciades-Pipeline existente - ciat .png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Pipeline de despliegue implementado en CIAT como piloto DevOps 
\begin_inset CommandInset label
LatexCommand label
name "fig:Pipeline-de-despliegue-implementado"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Resumen del capitulo 
\end_layout

\begin_layout Standard
El principal objetivo de este capítulo fue presentar las diferentes metodologías
 de desarrollo de software que dieron origen y que abrieron camino para
 que el concepto DevOps naciera como un movimiento cultural para la entrega
 de productos de software.
\end_layout

\begin_layout Standard
DevOps no tiene una única definición generalizada, todas buscan expresar
 una perspectiva que refleje el movimiento cultural que busca entregar productos
 de software a los clientes en el menor tiempo posible, a través de la implement
ación de buenas prácticas en procesos de desarrollo, entrega y calidad de
 software dando prevalencia a las personas, procesos sobre las herramientas.
\end_layout

\begin_layout Standard
En el mercado existen un número creciente de herramientas que apoyan cada
 uno de las fases del proceso de entrega DevOps brindando un abanico gigante
 de opciones para automatizar los procesos de desarrollo de software.
\end_layout

\begin_layout Standard
Por último, se describió la composición del departamento informático y en
 especial al área de desarrollo software administrativo de la compañía CIAT,
 en donde se describió cómo se abordó el primer acercamiento de la compañía
 a los conceptos, buenas prácticas y herramientas DevOps que se hizo por
 medio de un piloto técnico que se enfocó a la instalación e integración
 de servicios que complementaron la infraestructura ya existente, dejando
 de lado el análisis y validación de procesos de la cadena de valor para
 la entrega de soluciones de software.
 Lo que condujo al estancamiento de la adopción incremental de DevOps en
 el área.
\end_layout

\begin_layout Standard
En el siguiente capitulo se describirá como se definió, estructuró e implementó
 una propuesta de un artefacto de evaluación de capacidades DevOps para
 una organización, basada en un modelo dimensional que agrupa capacidades
 culturales, técnicas y de procesos para mejorar el rendimiento en la entrega
 de productos de software a través de automatización de procesos.
\end_layout

\end_body
\end_document
